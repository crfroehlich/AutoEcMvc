<#@ include file="imports.ttinclude" #><#
    var tables = BuildMethods.GetJsonFilesAsTables(Path.GetDirectoryName(Host.TemplateFile) + "\\..\\schema");
    foreach(var table in tables) {
        var isDerivedClass = !string.IsNullOrWhiteSpace(table.Base);
        var classContext = (true == table.IsBase) ? "abstract " : "";
        var hasPrimaryKey = !isDerivedClass && true != table.JunctionTable;
        var primaryKeyName = BuildMethods.GetPrimaryKeyName(table);#><#@ include file="warning.ttinclude" #>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

using AutoEcMvc.Enums;

namespace AutoEcMvc.Models
{
    public <#=classContext#>partial class <#= table.Name #><#= (isDerivedClass) ? $": {table.Base}" : ""#>
    {
<# if(hasPrimaryKey && !string.IsNullOrEmpty(table.DatabaseGeneratedOption)) { #>
        [DatabaseGenerated(DatabaseGeneratedOption.<#= table.DatabaseGeneratedOption #>)]
<# } if(hasPrimaryKey && !string.IsNullOrEmpty(table.PrimaryKeyDisplayName)) { #>
        [Display(Name = "<#= table.PrimaryKeyDisplayName #>")]
<# } if(hasPrimaryKey) { #>
        public int <#=primaryKeyName#> { get; set; }
<# } foreach(var column in table.Columns) { #>
<#=BuildMethods.GetModelProperty(column)#>
<# } #>
    }
}
<#
    SaveOutput(table.Name + ".cs", "..//..//..//AutoEcMvc//Generated//Models");
  } //foreach(var table in tables) 
#><#@ include file="saveoutput.ttinclude" #>