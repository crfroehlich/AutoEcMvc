<#@ include file="imports.ttinclude" #><#
    var tables = BuildMethods.GetJsonFilesAsTables(Path.GetDirectoryName(Host.TemplateFile) + "\\..\\schema");
    foreach(var table in tables.Where( t => true != t.IsBase && t.HasControllers)) {
        var hasPrimaryKey = true != table.JunctionTable;
        var primaryKeyName = BuildMethods.GetPrimaryKeyName(table,tables);
        var hasVersion = table.Columns.Any(c => c.Type.ToLower().Trim() == "version");#><#@ include file="warning.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoEcMvc.Data;
using AutoEcMvc.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;

namespace AutoEcMvc.Controllers
{
    public partial class <#=table.Name#>sController : ControllerBase
    {
        public <#=table.Name#>sController(MetadataContext context) : base(context) { }
<# if(table.ControllerMethods.Any( m => m == "Index" )) { #>
        // GET: <#=table.Name#>s
        public async Task<IActionResult> Index()
        {
            var context = _context.<#=table.Name#>s
<#=BuildMethods.GetIncludeColumns(table, tables)#>
                .AsNoTracking();
            return View(await context.ToListAsync());
        }
<# } #>
<# if(table.ControllerMethods.Any( m => m == "Details" )) { #>
        // GET: <#=table.Name#>s/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ret = await _context.<#=table.Name#>s
<#=BuildMethods.GetIncludeColumns(table, tables)#>
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.<#=primaryKeyName#> == id);

            if (ret == null)
            {
                return NotFound();
            }

            return View(ret);
        }
<# } #>
<# if(table.ControllerMethods.Any( m => m == "Create" )) { #>
        // GET: <#=table.Name#>s/Create
        public IActionResult Create()
        {
<# foreach(var incl in table.Columns.Where( c => true == c.MaterializeByDefault )) {#>
<#=BuildMethods.GetCreateBinding(incl, table, tables)#>
<#}#>
            _AfterUpdate();
            return View();
        }

        // POST: <#=table.Name#>s/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("<#=BuildMethods.GetBindingColumns(table,tables)#>")] <#=table.Name#> obj)
        {
            if (ModelState.IsValid)
            {
                _context.Add(obj);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
<#=BuildMethods.GetAfterUpdateBinding(table, tables)#>
            _AfterUpdate(obj);
            return View(obj);
        }
<# } #>
<# if(table.ControllerMethods.Any( m => m == "Edit" )) { #>
        // GET: <#=table.Name#>s/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.<#=table.Name#>s
<#=BuildMethods.GetIncludeColumns(table, tables)#>
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.<#=primaryKeyName#> == id);

            if (obj == null)
            {
                return NotFound();
            }
<#=BuildMethods.GetAfterUpdateBinding(table, tables)#>
            _AfterUpdate(obj);
            return View(obj);
        }

<# if(hasVersion) { #>
        // POST: <#=table.Name#>s/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int? id, byte[] rowVersion)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.<#=table.Name#>s
<#=BuildMethods.GetIncludeColumns(table, tables)#>
                .FirstOrDefaultAsync(m => m.<#=primaryKeyName#> == id);

            if (obj == null)
            {
                obj = new <#=table.Name#>();
                await TryUpdateModelAsync(obj);
                ModelState.AddModelError(string.Empty,
                    "Unable to save changes. The <#=table.Name.ToLower()#> was deleted by another user.");
<#=BuildMethods.GetAfterUpdateBinding(table, tables)#>
                _AfterUpdate(obj);
                return View(obj);
            }

            _context.Entry(obj).Property("<#=table.Columns.FirstOrDefault(c=>c.Type=="version").Name#>").OriginalValue = rowVersion;

            if (await TryUpdateModelAsync<<#=table.Name#>>(
                obj,
                "",
                <#=BuildMethods.GetAssignColumns(table, tables)#>))
            {
                try
                {
                    await _context.SaveChangesAsync();
                    return RedirectToAction(nameof(Index));
                }
                catch (DbUpdateConcurrencyException ex)
                {
                    var exceptionEntry = ex.Entries.Single();
                    var clientValues = (<#=table.Name#>)exceptionEntry.Entity;
                    var databaseEntry = exceptionEntry.GetDatabaseValues();
                    if (databaseEntry == null)
                    {
                        ModelState.AddModelError(string.Empty,
                            "Unable to save changes. The <#=table.Name.ToLower()#> was deleted by another user.");
                    }
                    else
                    {
                        var databaseValues = (<#=table.Name#>)databaseEntry.ToObject();
<#=BuildMethods.GetValidateColumns(table, tables)#>
                        ModelState.AddModelError(string.Empty, "The record you attempted to edit "
                                + "was modified by another user after you got the original value. The "
                                + "edit operation was canceled and the current values in the database "
                                + "have been displayed. If you still want to edit this record, click "
                                + "the Save button again. Otherwise click the Back to List hyperlink.");
                        obj.<#=table.Columns.FirstOrDefault(c=>c.Type=="version").Name#> = (byte[])databaseValues.<#=table.Columns.FirstOrDefault(c=>c.Type=="version").Name#>;
                        ModelState.Remove("<#=table.Columns.FirstOrDefault(c=>c.Type=="version").Name#>");
                    }
                }
            }
<#=BuildMethods.GetAfterUpdateBinding(table, tables)#>
            return View(obj);
        }
<# } else { #>

        // POST: <#=table.Name#>s/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost, ActionName("Edit")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditPost(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.<#=table.Name#>s
<#=BuildMethods.GetIncludeColumns(table, tables)#>
                .FirstOrDefaultAsync(m => m.<#=primaryKeyName#> == id);

            if (await TryUpdateModelAsync<<#=table.Name#>>(obj,
                "",
                <#=BuildMethods.GetAssignColumns(table, tables)#>))
            {
                try
                {
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateException /* ex */)
                {
                    //Log the error (uncomment ex variable name and write a log.)
                    ModelState.AddModelError("", "Unable to save changes. " +
                        "Try again, and if the problem persists, " +
                        "see your system administrator.");
                }
                return RedirectToAction(nameof(Index));
            }
            _AfterUpdate(obj);
            return View(obj);
        }
<# } } #>
<# if(table.ControllerMethods.Any( m => m == "Delete" )) { #>
        // GET: <#=table.Name#>s/Delete/5
        public async Task<IActionResult> Delete(int? id, bool? concurrencyError = null)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.<#=table.Name#>s
<#=BuildMethods.GetIncludeColumns(table, tables)#>
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.<#=primaryKeyName#> == id);
            if (obj == null)
            {
                if (concurrencyError.GetValueOrDefault())
                {
                    return RedirectToAction(nameof(Index));
                }
                return NotFound();
            }

            if (concurrencyError.GetValueOrDefault())
            {
                ViewData["ConcurrencyErrorMessage"] = "The record you attempted to delete "
                    + "was modified by another user after you got the original values. "
                    + "The delete operation was canceled and the current values in the "
                    + "database have been displayed. If you still want to delete this "
                    + "record, click the Delete button again. Otherwise "
                    + "click the Back to List hyperlink.";
            }

            return View(obj);
        }
        // POST: <#=table.Name#>s/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Delete(<#=table.Name#> obj)
        {
            try
            {
                if (await _context.<#=table.Name#>s.AnyAsync(m => m.<#=primaryKeyName#> == obj.<#=primaryKeyName#>))
                {
                    _context.<#=table.Name#>s.Remove(obj);
                    await _context.SaveChangesAsync();
                }
                return RedirectToAction(nameof(Index));
            }
            catch (DbUpdateConcurrencyException /* ex */)
            {
                //Log the error (uncomment ex variable name and write a log.)
                return RedirectToAction(nameof(Delete), new { concurrencyError = true, id = obj.<#=primaryKeyName#> });
            }
        }
<# } #>
        private bool <#=table.Name#>Exists(int id)
        {
            return _context.<#=table.Name#>s.Any(e => e.<#=primaryKeyName#> == id);
        }
    }
}
<#
    SaveOutput(table.Name + "sController.cs", "..//..//..//AutoEcMvc//Generated//Controllers");
  } //foreach(var table in tables) 
#><#@ include file="saveoutput.ttinclude" #>