//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoEcMvc.Data;
using AutoEcMvc.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;

namespace AutoEcMvc.Controllers
{
    public partial class DepartmentsController : ControllerBase
    {
        public DepartmentsController(MetadataContext context) : base(context) { }
        // GET: Departments
        public async Task<IActionResult> Index()
        {
            var context = _context.Departments
                .Include(c => c.Administrator)
                .Include(c => c.Administrator).ThenInclude(c => c.CourseAssignments).ThenInclude(c => c.Course)
                .Include(c => c.Administrator).ThenInclude(c => c.OfficeAssignment)
                .AsNoTracking();
            return View(await context.ToListAsync());
        }
        // GET: Departments/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ret = await _context.Departments
                .Include(c => c.Administrator)
                .Include(c => c.Administrator).ThenInclude(c => c.CourseAssignments).ThenInclude(c => c.Course)
                .Include(c => c.Administrator).ThenInclude(c => c.OfficeAssignment)
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.DepartmentID == id);

            if (ret == null)
            {
                return NotFound();
            }

            return View(ret);
        }
        // GET: Departments/Create
        public IActionResult Create()
        {
            ViewData["InstructorID"] = new SelectList(_context.Instructors, "ID", "FullName");
            _AfterUpdate();
            return View();
        }

        // POST: Departments/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("DepartmentID,Name,Budget,StartDate,RowVersion,InstructorID")] Department obj)
        {
            if (ModelState.IsValid)
            {
                _context.Add(obj);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["InstructorID"] = new SelectList(_context.Instructors, "ID", "FullName", obj.InstructorID);
            _AfterUpdate(obj);
            return View(obj);
        }
        // GET: Departments/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.Departments
                .Include(c => c.Administrator)
                .Include(c => c.Administrator).ThenInclude(c => c.CourseAssignments).ThenInclude(c => c.Course)
                .Include(c => c.Administrator).ThenInclude(c => c.OfficeAssignment)
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.DepartmentID == id);

            if (obj == null)
            {
                return NotFound();
            }
            ViewData["InstructorID"] = new SelectList(_context.Instructors, "ID", "FullName", obj.InstructorID);
            _AfterUpdate(obj);
            return View(obj);
        }

        // POST: Departments/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int? id, byte[] rowVersion)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.Departments
                .Include(c => c.Administrator)
                .Include(c => c.Administrator).ThenInclude(c => c.CourseAssignments).ThenInclude(c => c.Course)
                .Include(c => c.Administrator).ThenInclude(c => c.OfficeAssignment)
                .FirstOrDefaultAsync(m => m.DepartmentID == id);

            if (obj == null)
            {
                obj = new Department();
                await TryUpdateModelAsync(obj);
                ModelState.AddModelError(string.Empty,
                    "Unable to save changes. The department was deleted by another user.");
            ViewData["InstructorID"] = new SelectList(_context.Instructors, "ID", "FullName", obj.InstructorID);
                _AfterUpdate(obj);
                return View(obj);
            }

            _context.Entry(obj).Property("RowVersion").OriginalValue = rowVersion;

            if (await TryUpdateModelAsync<Department>(
                obj,
                "",
                s => s.Name,s => s.Budget,s => s.StartDate,s => s.InstructorID))
            {
                try
                {
                    await _context.SaveChangesAsync();
                    return RedirectToAction(nameof(Index));
                }
                catch (DbUpdateConcurrencyException ex)
                {
                    var exceptionEntry = ex.Entries.Single();
                    var clientValues = (Department)exceptionEntry.Entity;
                    var databaseEntry = exceptionEntry.GetDatabaseValues();
                    if (databaseEntry == null)
                    {
                        ModelState.AddModelError(string.Empty,
                            "Unable to save changes. The department was deleted by another user.");
                    }
                    else
                    {
                        var databaseValues = (Department)databaseEntry.ToObject();
                        if (databaseValues.Name != clientValues.Name)
                        {
                            ModelState.AddModelError("Name", $"Current value: { databaseValues.Name}");
                        }
                        if (databaseValues.Budget != clientValues.Budget)
                        {
                            ModelState.AddModelError("Budget", $"Current value: { databaseValues.Budget:c}");
                        }
                        if (databaseValues.StartDate != clientValues.StartDate)
                        {
                            ModelState.AddModelError("StartDate", $"Current value: { databaseValues.StartDate:d}");
                        }
                        if (databaseValues.InstructorID != clientValues.InstructorID)
                        {
                            var en = await _context.Instructors.FirstOrDefaultAsync(i => i.ID == databaseValues.InstructorID);
                            ModelState.AddModelError("InstructorID", $"Current value: { en.FullName}");
                        }
                        ModelState.AddModelError(string.Empty, "The record you attempted to edit "
                                + "was modified by another user after you got the original value. The "
                                + "edit operation was canceled and the current values in the database "
                                + "have been displayed. If you still want to edit this record, click "
                                + "the Save button again. Otherwise click the Back to List hyperlink.");
                        obj.RowVersion = (byte[])databaseValues.RowVersion;
                        ModelState.Remove("RowVersion");
                    }
                }
            }
            ViewData["InstructorID"] = new SelectList(_context.Instructors, "ID", "FullName", obj.InstructorID);
            return View(obj);
        }
        // GET: Departments/Delete/5
        public async Task<IActionResult> Delete(int? id, bool? concurrencyError = null)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.Departments
                .Include(c => c.Administrator)
                .Include(c => c.Administrator).ThenInclude(c => c.CourseAssignments).ThenInclude(c => c.Course)
                .Include(c => c.Administrator).ThenInclude(c => c.OfficeAssignment)
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.DepartmentID == id);
            if (obj == null)
            {
                if (concurrencyError.GetValueOrDefault())
                {
                    return RedirectToAction(nameof(Index));
                }
                return NotFound();
            }

            if (concurrencyError.GetValueOrDefault())
            {
                ViewData["ConcurrencyErrorMessage"] = "The record you attempted to delete "
                    + "was modified by another user after you got the original values. "
                    + "The delete operation was canceled and the current values in the "
                    + "database have been displayed. If you still want to delete this "
                    + "record, click the Delete button again. Otherwise "
                    + "click the Back to List hyperlink.";
            }

            return View(obj);
        }
        // POST: Departments/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Delete(Department obj)
        {
            try
            {
                if (await _context.Departments.AnyAsync(m => m.DepartmentID == obj.DepartmentID))
                {
                    _context.Departments.Remove(obj);
                    await _context.SaveChangesAsync();
                }
                return RedirectToAction(nameof(Index));
            }
            catch (DbUpdateConcurrencyException /* ex */)
            {
                //Log the error (uncomment ex variable name and write a log.)
                return RedirectToAction(nameof(Delete), new { concurrencyError = true, id = obj.DepartmentID });
            }
        }
        private bool DepartmentExists(int id)
        {
            return _context.Departments.Any(e => e.DepartmentID == id);
        }
    }
}
