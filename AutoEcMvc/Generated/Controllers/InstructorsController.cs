//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoEcMvc.Data;
using AutoEcMvc.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;

namespace AutoEcMvc.Controllers
{
    public partial class InstructorsController : ControllerBase
    {
        public InstructorsController(MetadataContext context) : base(context) { }
        // GET: Instructors/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var ret = await _context.Instructors
                .Include(c => c.CourseAssignments)
                .Include(c => c.CourseAssignments).ThenInclude(c => c.Course).ThenInclude(c => c.Department)
                .Include(c => c.OfficeAssignment)
                .OrderBy(c => c.LastName)
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.ID == id);

            if (ret == null)
            {
                return NotFound();
            }

            return View(ret);
        }
        // GET: Instructors/Create
        public IActionResult Create()
        {
            
            
            _AfterUpdate();
            return View();
        }

        // POST: Instructors/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("ID,HireDate,OfficeAssignment,ID,LastName,FirstMidName")] Instructor obj)
        {
            if (ModelState.IsValid)
            {
                _context.Add(obj);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            
            
            _AfterUpdate(obj);
            return View(obj);
        }
        // GET: Instructors/Delete/5
        public async Task<IActionResult> Delete(int? id, bool? concurrencyError = null)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.Instructors
                .Include(c => c.CourseAssignments)
                .Include(c => c.CourseAssignments).ThenInclude(c => c.Course).ThenInclude(c => c.Department)
                .Include(c => c.OfficeAssignment)
                .OrderBy(c => c.LastName)
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.ID == id);
            if (obj == null)
            {
                if (concurrencyError.GetValueOrDefault())
                {
                    return RedirectToAction(nameof(Index));
                }
                return NotFound();
            }

            if (concurrencyError.GetValueOrDefault())
            {
                ViewData["ConcurrencyErrorMessage"] = "The record you attempted to delete "
                    + "was modified by another user after you got the original values. "
                    + "The delete operation was canceled and the current values in the "
                    + "database have been displayed. If you still want to delete this "
                    + "record, click the Delete button again. Otherwise "
                    + "click the Back to List hyperlink.";
            }

            return View(obj);
        }
        // POST: Instructors/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Delete(Instructor obj)
        {
            try
            {
                if (await _context.Instructors.AnyAsync(m => m.ID == obj.ID))
                {
                    _context.Instructors.Remove(obj);
                    await _context.SaveChangesAsync();
                }
                return RedirectToAction(nameof(Index));
            }
            catch (DbUpdateConcurrencyException /* ex */)
            {
                //Log the error (uncomment ex variable name and write a log.)
                return RedirectToAction(nameof(Delete), new { concurrencyError = true, id = obj.ID });
            }
        }
        private bool InstructorExists(int id)
        {
            return _context.Instructors.Any(e => e.ID == id);
        }
    }
}
