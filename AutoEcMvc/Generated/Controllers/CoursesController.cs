//------------------------------------------------------------------------------
// <auto-generated>
//    This code is auto-generated by a T4 template. This class can be only customized modifying the corresponding partial class.
//    All other changes to this file will cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoEcMvc.Data;
using AutoEcMvc.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;

namespace AutoEcMvc.Controllers
{
    public partial class CoursesController : ControllerBase
    {
        public CoursesController(MetadataContext context) : base(context) { }

        // GET: Courses
        public async Task<IActionResult> Index()
        {
            var context = _context.Courses
                .Include( c => c.Department )
                .AsNoTracking();
            return View(await context.ToListAsync());
        }

        // GET: Courses/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            string query = "SELECT * FROM Course WHERE CourseID = {0}";
            var ret = await _context.Courses
                .FromSql(query, id)
                .Include(c => c.Department)
                .AsNoTracking()
                .FirstOrDefaultAsync();

            if (ret == null)
            {
                return NotFound();
            }

            return View(ret);
        }

        // GET: Courses/Create
        public IActionResult Create()
        {
            ViewData["Department"] = new SelectList(_context.Departments, "DepartmentID", "Name");
            _AfterUpdate();
            return View();
        }

        // POST: Courses/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("CourseID,Title,Credits,Department,DepartmentID")] Course obj)
        {
            if (ModelState.IsValid)
            {
                _context.Add(obj);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["Department"] = new SelectList(_context.Departments, "DepartmentID", "Name", obj.Department);
            _AfterUpdate(obj);
            return View(obj);
        }

        // GET: Courses/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.Courses
                .Include(c => c.Department)
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.CourseID == id);

            if (obj == null)
            {
                return NotFound();
            }
            ViewData["Department"] = new SelectList(_context.Departments, "DepartmentID", "Name", obj.Department);
            _AfterUpdate(obj);
            return View(obj);
        }


        // POST: Courses/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost, ActionName("Edit")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditPost(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.Courses
                .Include(c => c.Department)
                .FirstOrDefaultAsync(m => m.CourseID == id);

            if (await TryUpdateModelAsync<Course>(obj,
                "",
                s => s.Title,s => s.Credits,s => s.Department))
            {
                try
                {
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateException /* ex */)
                {
                    //Log the error (uncomment ex variable name and write a log.)
                    ModelState.AddModelError("", "Unable to save changes. " +
                        "Try again, and if the problem persists, " +
                        "see your system administrator.");
                }
                return RedirectToAction(nameof(Index));
            }
            _AfterUpdate(obj);
            return View(obj);
        }
        // GET: Courses/Delete/5
        public async Task<IActionResult> Delete(int? id, bool? concurrencyError = null)
        {
            if (id == null)
            {
                return NotFound();
            }

            var obj = await _context.Courses
                .Include(c => c.Department)
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.CourseID == id);
            if (obj == null)
            {
                if (concurrencyError.GetValueOrDefault())
                {
                    return RedirectToAction(nameof(Index));
                }
                return NotFound();
            }

            if (concurrencyError.GetValueOrDefault())
            {
                ViewData["ConcurrencyErrorMessage"] = "The record you attempted to delete "
                    + "was modified by another user after you got the original values. "
                    + "The delete operation was canceled and the current values in the "
                    + "database have been displayed. If you still want to delete this "
                    + "record, click the Delete button again. Otherwise "
                    + "click the Back to List hyperlink.";
            }

            return View(obj);
        }
        // POST: Courses/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Delete(Course obj)
        {
            try
            {
                if (await _context.Courses.AnyAsync(m => m.CourseID == obj.CourseID))
                {
                    _context.Courses.Remove(obj);
                    await _context.SaveChangesAsync();
                }
                return RedirectToAction(nameof(Index));
            }
            catch (DbUpdateConcurrencyException /* ex */)
            {
                //Log the error (uncomment ex variable name and write a log.)
                return RedirectToAction(nameof(Delete), new { concurrencyError = true, id = obj.CourseID });
            }
        }

        private bool CourseExists(int id)
        {
            return _context.Courses.Any(e => e.CourseID == id);
        }
    }
}
